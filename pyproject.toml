[project]
name = "polars-qt"
requires-python = ">=3.8"
authors = [
    { name = "Teamon9161", email = "teamon9161@163.com" }
]
classifiers = [
  "Programming Language :: Rust",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
    "polars>=0.20.16",
]

[build-system]
requires = ["maturin>=1.0,<2.0", "polars>=0.20.16"]
build-backend = "maturin"

[tool.rye]
managed = true
virtual = true
dev-dependencies = [
    "maturin>=1.5.1",
    "pip>=24.0",
    "ruff>=0.3.5",
    "spyder-kernels>=2.5.1",
    "pytest>=7.4.3",
    "pandas[feather]>=2.2.1",
]

[tool.ruff]
line-length = 88
fix = false

[tool.ruff.lint]
select = [
  "E", # pycodestyle
  "W", # pycodestyle
  "F", # Pyflakes
  "B", # flake8-bugbear
  "C4", # flake8-comprehensions
#   "D", # flake8-docstrings
  "D213", # Augment NumPy docstring convention: Multi-line docstring summary should start at the second line
  "D417", # Augment NumPy docstring convention: Missing argument descriptions
  "I", # isort
  "SIM", # flake8-simplify
  "TCH", # flake8-type-checking
  "TID", # flake8-tidy-imports
  "UP", # pyupgrade
  "PT", # flake8-pytest-style
  "RUF", # Ruff-specific rules
  "PTH", # flake8-use-pathlib
  "FA", # flake8-future-annotations
  "PIE", # flake8-pie
  "TD", # flake8-todos
  "TRY", # tryceratops
  "EM", # flake8-errmsg
  "FBT001", # flake8-boolean-trap
]

ignore = [
    "F401", # imported but unused
    "F403", # unable to detect undefined names
    "F405", # name may be undefined, or defined from star imports
    "EM101", # Exception must not use a string literal, assign to variable first
    "TRY003", # Avoid specifying long messages outside the exception class
    "E501", # line too long
]
